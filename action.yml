name: Determine Image Tag
description: |
  Generates consistent image tags for builds and releases.
  Supports multiple tag formats and handles duplicate prevention.
author: "KoalaOps"

branding:
  icon: "tag"
  color: "purple"

inputs:
  service_name:
    description: "Service name to include in tag (optional)"
    required: false
    default: ""
  custom_tag:
    description: "Custom tag to use instead of auto-generation"
    required: false
    default: ""
  tag_format:
    description: "Tag format: 'service-date-branch-counter' (default), 'branch-date-counter', 'branch-date', or 'date-branch'. All formats support underscore aliases (e.g., 'branch_date_counter')"
    required: false
    default: "service-date-branch-counter"
  max_length:
    description: "Maximum tag length (default: 63 for Kubernetes compatibility)"
    required: false
    default: "63"
  include_counter:
    description: "Whether to include counter for duplicate prevention"
    required: false
    default: "true"
  branch_ref:
    description: "Git branch reference (defaults to github.ref)"
    required: false
    default: ""
  pull_request_ref:
    description: "Pull request head ref (defaults to github.event.pull_request.head.ref)"
    required: false
    default: ""
  working_directory:
    description: "Working directory where the git repository is located"
    required: false
    default: "."
  branch_separator:
    description: "Character to replace special characters in branch names"
    required: false
    default: "-"

outputs:
  tag:
    description: "Generated image tag"
    value: ${{ steps.generate-tag.outputs.tag }}
  commit_hash:
    description: "Current commit hash"
    value: ${{ steps.generate-tag.outputs.commit_hash }}
  branch:
    description: "Normalized branch name"
    value: ${{ steps.generate-tag.outputs.branch }}

runs:
  using: composite
  steps:
    - name: Generate image tag
      id: generate-tag
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "🏷️ Generating image tag..."
        
        # Get inputs with defaults
        SERVICE_NAME="${{ inputs.service_name }}"
        CUSTOM_TAG="${{ inputs.custom_tag }}"
        TAG_FORMAT="${{ inputs.tag_format }}"
        MAX_LENGTH="${{ inputs.max_length }}"
        INCLUDE_COUNTER="${{ inputs.include_counter }}"
        BRANCH_REF="${{ inputs.branch_ref || github.ref }}"
        PR_REF="${{ inputs.pull_request_ref || github.event.pull_request.head.ref }}"
        BRANCH_SEP="${{ inputs.branch_separator }}"
        
        # Validate max_length
        if ! [[ "$MAX_LENGTH" =~ ^[0-9]+$ ]] || [ "$MAX_LENGTH" -le 0 ]; then
          echo "❌ Error: max_length must be a positive integer"
          exit 1
        fi
        
        # Get commit hash
        if ! COMMIT_HASH=$(git rev-parse HEAD 2>/dev/null); then
          echo "❌ Error: Not in a git repository or git is not available"
          exit 1
        fi
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        
        # Use custom tag if provided
        if [ -n "$CUSTOM_TAG" ]; then
          TAG=$(echo "$CUSTOM_TAG" | tr '/:' "$BRANCH_SEP")
          # Apply truncation to custom tags
          if [ ${#TAG} -gt "$MAX_LENGTH" ]; then
            TAG=${TAG:0:$MAX_LENGTH}
            echo "✂️ Truncated custom tag to $MAX_LENGTH characters"
          fi
          echo "✅ Using custom tag: $TAG"
        else
          # Determine branch name
          # Priority: explicit branch_ref input > PR ref > github.ref
          if [ -n "${{ inputs.branch_ref }}" ]; then
            BRANCH=$(echo "$BRANCH_REF" | sed 's#refs/heads/##')
          elif [ -n "$PR_REF" ]; then
            BRANCH="$PR_REF"
          else
            BRANCH=$(echo "$BRANCH_REF" | sed 's#refs/heads/##')
          fi
          
          # Normalize branch name (replace special characters with separator)
          BRANCH=$(echo "$BRANCH" | tr '/:@#' "$BRANCH_SEP")
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "📋 Branch: $BRANCH"
          
          # Generate date
          DATE=$(date +'%Y-%m-%d')
          echo "📅 Date: $DATE"
          
          # Step 1: Calculate available length for branch
          # Account for fixed parts: service (if any), date, counter (if any), and separators
          AVAILABLE_FOR_BRANCH=$MAX_LENGTH
          MIN_BRANCH_LENGTH=10  # Minimum chars to reserve for branch
          
          # Reserve space for counter if needed
          if [ "$INCLUDE_COUNTER" = "true" ]; then
            AVAILABLE_FOR_BRANCH=$((AVAILABLE_FOR_BRANCH - 3))  # _NN = 3 chars
          fi

          # If format contains date, then we need to reserve space for date
          if [[ "$TAG_FORMAT" =~ "date" ]]; then
            AVAILABLE_FOR_BRANCH=$((AVAILABLE_FOR_BRANCH - 11))  # date (10) + separator (1)
          fi

          # Truncate service name if needed to preserve minimum branch space
          TRUNCATED_SERVICE="$SERVICE_NAME"
          if [ -n "$SERVICE_NAME" ]; then
            # Max service length = available space - minimum branch - separator
            MAX_SERVICE_LENGTH=$((AVAILABLE_FOR_BRANCH - MIN_BRANCH_LENGTH - 1))
            
            if [ ${#SERVICE_NAME} -gt "$MAX_SERVICE_LENGTH" ] && [ "$MAX_SERVICE_LENGTH" -gt 0 ]; then
              TRUNCATED_SERVICE=${SERVICE_NAME:0:$MAX_SERVICE_LENGTH}
              echo "✂️ Truncating service name to $MAX_SERVICE_LENGTH characters to preserve branch"
            fi
            
            # Update available space for branch after service
            AVAILABLE_FOR_BRANCH=$((AVAILABLE_FOR_BRANCH - ${#TRUNCATED_SERVICE} - 1))  # service + _
          fi
          
          # Step 2: Truncate branch if needed
          TRUNCATED_BRANCH="$BRANCH"
          if [ "$AVAILABLE_FOR_BRANCH" -le 0 ]; then
            TRUNCATED_BRANCH=""
            echo "⚠️ No space available for branch name"
          elif [ ${#BRANCH} -gt "$AVAILABLE_FOR_BRANCH" ]; then
            TRUNCATED_BRANCH=${BRANCH:0:$AVAILABLE_FOR_BRANCH}
            echo "✂️ Truncating branch to $AVAILABLE_FOR_BRANCH characters"
          fi
          
          # Step 3: Build the tag with (potentially truncated) service and branch
          case "$TAG_FORMAT" in
            "service-date-branch-counter"|"service_date_branch_counter"|"service-date-branch"|"service_date_branch")
              if [ -n "$TRUNCATED_SERVICE" ]; then
                TAG="${TRUNCATED_SERVICE}_${DATE}_${TRUNCATED_BRANCH}"
              else
                TAG="${DATE}_${TRUNCATED_BRANCH}"
              fi
              ;;
            "branch-date"|"branch_date"|"branch-date-counter"|"branch_date_counter")
              TAG="${TRUNCATED_BRANCH}_${DATE}"
              ;;
            "date-branch"|"date_branch"|"date-branch-counter"|"date_branch_counter")
              TAG="${DATE}_${TRUNCATED_BRANCH}"
              ;;
            *)
              echo "❌ Invalid TAG_FORMAT: $TAG_FORMAT"
              echo "Valid formats: service-date-branch, branch-date, date-branch (variants: with or without counter suffix, with _ or - separator)"
              exit 1
              ;;
          esac
          
          echo "🔨 Base tag: $TAG"
          
          # Add counter if enabled
          if [ "$INCLUDE_COUNTER" = "true" ]; then
            # Try to get counter from remote tags, fallback to local if remote fails
            COUNTER=0
            if git ls-remote --tags origin >/dev/null 2>&1; then
              # Count tags that match our pattern, excluding annotated tag markers
              COUNTER=$(git ls-remote --tags origin | grep -v '\^{}' | grep -c "refs/tags/${TAG}_[0-9][0-9]$" || true)
              # Ensure COUNTER is set to 0 if empty
              COUNTER=${COUNTER:-0}
            else
              echo "⚠️  Cannot access remote tags, using local tags for counter"
              # Count local tags that match our pattern
              COUNTER=$(git tag -l "${TAG}_[0-9][0-9]" | grep -c . || true)
              COUNTER=${COUNTER:-0}
            fi
            
            # Format counter with leading zero
            COUNTER=$(printf '%02d' "$COUNTER")
            COUNTER_SUFFIX="_${COUNTER}"
            echo "🔢 Counter: $COUNTER"
            
            # Add counter suffix
            TAG="${TAG}${COUNTER_SUFFIX}"
          fi
        fi
        
        echo "🎯 Final tag: $TAG"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "TAG=$TAG" >> $GITHUB_ENV